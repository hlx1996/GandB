# This script is for drawing b-spline given n+1 control points
# The whole curve is draw by drawing each segments subsequently
import matplotlib.pyplot as plt
import numpy as np


def test():
    a = [1,1,1,1,1,1,1,1,1,1]
    b = [1,1,1,1,1,1,1,1,1,1]
    
    a = np.matrix(a)
    b = np.matrix(b)
    c = a* np.transpose(b)
    print c[0][0] +1

# given a order p and a time u, return a vector for polynoimal calculation
def getTimeVector(u,p):
    uv = []
    for i in range(p+1):
        uv.append(u**(p-i))
    # print uv
    return uv

def draw():
    # currently the order is set to p=4
    p = 4 
    n = 15
    m = n+p+1

    # need a function to get n+1 control points
    pts = [
        [1,1],
        [1,1],
        [1,1],
        [1,1],
        [1,1],
        [2,2],#
        [3,4],
        [4,4],
        [5,2],
        [7,3],
        # [8,4],
        # [8,6],
        # [6,8],
        # [5,8],
        # [5,7],
        [4,8],#
        [4,9],
        [4,9],
        [4,9],
        [4,9],
        [4,9]
    ]

    # coefficient of the polynomials, in the order from high to low degree 
    coe = [ 
[
[0.0416666666666667, - 0.833333333333333, + 6.25, - 20.8333333333333, + 26.0416666666667],
[-0.166666666666667, + 3.16666666666667, - 22.25, + 68.1666666666667, - 76.2083333333333],
[                                       0.25, - 4.5, + 29.75, - 85.5, + 90.4583333333333],
[-0.166666666666667, + 2.83333333333333, - 17.75, + 48.8333333333333, - 49.9583333333333],
[ 0.0416666666666667, - 0.666666666666667, + 4.0, - 10.6666666666667, + 10.6666666666667]],
[
[                                       0.0416666666666667, - 1.0, + 9.0, - 36.0, + 54.0],
[-0.166666666666667, + 3.83333333333333, - 32.75, + 122.833333333333, - 169.958333333333],
[                                      0.25, - 5.5, + 44.75, - 159.5, + 210.458333333333],
[                         -0.166666666666667, + 3.5, - 27.25, + 93.5, - 119.541666666667],
[0.0416666666666667, - 0.833333333333333, + 6.25, - 20.8333333333333, + 26.0416666666667]],
[
[0.0416666666666667, - 1.16666666666667, + 12.25, - 57.1666666666667, + 100.041666666667],
[                        -0.166666666666667, + 4.5, - 45.25, + 200.5, - 329.541666666667],
[                                      0.25, - 6.5, + 62.75, - 266.5, + 420.458333333333],
[-0.166666666666667, + 4.16666666666667, - 38.75, + 159.166666666667, - 243.958333333333],
[                                       0.0416666666666667, - 1.0, + 9.0, - 36.0, + 54.0]],
[
[ 0.0416666666666667, - 1.33333333333333, + 16.0, - 85.3333333333333, + 170.666666666667],
[-0.166666666666667, + 5.16666666666667, - 59.75, + 305.166666666667, - 579.958333333333],
[                                      0.25, - 7.5, + 83.75, - 412.5, + 756.458333333333],
[-0.166666666666667, + 4.83333333333333, - 52.25, + 249.833333333333, - 446.208333333333],
[0.0416666666666667, - 1.16666666666667, + 12.25, - 57.1666666666667, + 100.041666666667]],
[
[                                 0.0416666666666667, - 1.5, + 20.25, - 121.5, + 273.375],
[-0.166666666666667, + 5.83333333333333, - 76.25, + 440.833333333333, - 950.208333333333],
[                                     0.25, - 8.5, + 107.75, - 603.5, + 1260.45833333333],
[                        -0.166666666666667, + 5.5, - 67.75, + 369.5, - 753.291666666667],
[ 0.0416666666666667, - 1.33333333333333, + 16.0, - 85.3333333333333, + 170.666666666667]],
[
[ 0.0416666666666667, - 1.66666666666667, + 25.0, - 166.666666666667, + 416.666666666667],
[                        -0.166666666666667, + 6.5, - 94.75, + 611.5, - 1473.29166666667],
[                                     0.25, - 9.5, + 134.75, - 845.5, + 1980.45833333333],
[-0.166666666666667, + 6.16666666666667, - 85.25, + 522.166666666667, - 1196.20833333333],
[                                 0.0416666666666667, - 1.5, + 20.25, - 121.5, + 273.375]],
[
[ 0.0416666666666667, - 1.83333333333333, + 30.25, - 221.833333333333, + 610.041666666667],
[-0.166666666666667, + 7.16666666666667, - 115.25, + 821.166666666667, - 2186.20833333333],
[                                    0.25, - 10.5, + 164.75, - 1144.5, + 2970.45833333333],
[-0.166666666666667, + 6.83333333333333, - 104.75, + 711.833333333333, - 1809.95833333333],
[  0.0416666666666667, - 1.66666666666667, + 25.0, - 166.666666666667, + 416.666666666667]],
[
[                                     0.0416666666666667, - 2.0, + 36.0, - 288.0, + 864.0],
[-0.166666666666667, + 7.83333333333333, - 137.75, + 1073.83333333333, - 3129.95833333333],
[                                    0.25, - 11.5, + 197.75, - 1506.5, + 4290.45833333333],
[                        -0.166666666666667, + 7.5, - 126.25, + 942.5, - 2633.54166666667],
[ 0.0416666666666667, - 1.83333333333333, + 30.25, - 221.833333333333, + 610.041666666667]],
[
[ 0.0416666666666667, - 2.16666666666667, + 42.25, - 366.166666666667, + 1190.04166666667],
[                       -0.166666666666667, + 8.5, - 162.25, + 1373.5, - 4349.54166666667],
[                                    0.25, - 12.5, + 233.75, - 1937.5, + 6006.45833333333],
[-0.166666666666667, + 8.16666666666667, - 149.75, + 1218.16666666667, - 3709.95833333333],
[                                     0.0416666666666667, - 2.0, + 36.0, - 288.0, + 864.0]],
[
[  0.0416666666666667, - 2.33333333333333, + 49.0, - 457.333333333333, + 1600.66666666667],
[-0.166666666666667, + 9.16666666666667, - 188.75, + 1724.16666666667, - 5893.95833333333],
[                                    0.25, - 13.5, + 272.75, - 2443.5, + 8190.45833333333],
[-0.166666666666667, + 8.83333333333333, - 175.25, + 1542.83333333333, - 5086.20833333333],
[ 0.0416666666666667, - 2.16666666666667, + 42.25, - 366.166666666667, + 1190.04166666667]],
[
[                                 0.0416666666666667, - 2.5, + 56.25, - 562.5, + 2109.375],
[-0.166666666666667, + 9.83333333333333, - 217.25, + 2129.83333333333, - 7816.20833333333],
[                                    0.25, - 14.5, + 314.75, - 3030.5, + 10920.4583333333],
[                       -0.166666666666667, + 9.5, - 202.75, + 1920.5, - 6813.29166666667],
[  0.0416666666666667, - 2.33333333333333, + 49.0, - 457.333333333333, + 1600.66666666667]],
[
[  0.0416666666666667, - 2.66666666666667, + 64.0, - 682.666666666667, + 2730.66666666667],
[                      -0.166666666666667, + 10.5, - 247.75, + 2594.5, - 10173.2916666667],
[                                    0.25, - 15.5, + 359.75, - 3704.5, + 14280.4583333333],
[-0.166666666666667, + 10.1666666666667, - 232.25, + 2355.16666666667, - 8946.20833333333],
[                                 0.0416666666666667, - 2.5, + 56.25, - 562.5, + 2109.375]],
[
[ 0.0416666666666667, - 2.83333333333333, + 72.25, - 818.833333333333, + 3480.04166666667],
[-0.166666666666667, + 11.1666666666667, - 280.25, + 3122.16666666667, - 13026.2083333333],
[                                    0.25, - 16.5, + 407.75, - 4471.5, + 18360.4583333333],
[-0.166666666666667, + 10.8333333333333, - 263.75, + 2850.83333333333, - 11543.9583333333],
[  0.0416666666666667, - 2.66666666666667, + 64.0, - 682.666666666667, + 2730.66666666667]],
[
[                                    0.0416666666666667, - 3.0, + 81.0, - 972.0, + 4374.0],
[-0.166666666666667, + 11.8333333333333, - 314.75, + 3716.83333333333, - 16439.9583333333],
[                                    0.25, - 17.5, + 458.75, - 5337.5, + 23256.4583333333],
[                      -0.166666666666667, + 11.5, - 297.25, + 3411.5, - 14669.5416666667],
[ 0.0416666666666667, - 2.83333333333333, + 72.25, - 818.833333333333, + 3480.04166666667]],
[
[ 0.0416666666666667, - 3.16666666666667, + 90.25, - 1143.16666666667, + 5430.04166666667],
[                      -0.166666666666667, + 12.5, - 351.25, + 4382.5, - 20483.5416666667],
[                                    0.25, - 18.5, + 512.75, - 6308.5, + 29070.4583333333],
[-0.166666666666667, + 12.1666666666667, - 332.75, + 4041.16666666667, - 18389.9583333333],
[                                    0.0416666666666667, - 3.0, + 81.0, - 972.0, + 4374.0]],
[
[ 0.0416666666666667, - 3.33333333333333, + 100.0, - 1333.33333333333, + 6666.66666666667],
[-0.166666666666667, + 13.1666666666667, - 389.75, + 5123.16666666667, - 25229.9583333333],
[                                    0.25, - 19.5, + 569.75, - 7390.5, + 35910.4583333333],
[-0.166666666666667, + 12.8333333333333, - 370.25, + 4743.83333333333, - 22776.2083333333],
[ 0.0416666666666667, - 3.16666666666667, + 90.25, - 1143.16666666667, + 5430.04166666667]],
[
[                               0.0416666666666667, - 3.5, + 110.25, - 1543.5, + 8103.375],
[-0.166666666666667, + 13.8333333333333, - 430.25, + 5942.83333333333, - 30756.2083333333],
[                                    0.25, - 20.5, + 629.75, - 8589.5, + 43890.4583333333],
[                      -0.166666666666667, + 13.5, - 409.75, + 5523.5, - 27903.2916666667],
[ 0.0416666666666667, - 3.33333333333333, + 100.0, - 1333.33333333333, + 6666.66666666667]]
    ]


    # draw the curve in [u_p, u_m-p]
    x = []
    y = []
    sx = []
    sy = []
    cx = []
    cy = []

    uvt = []
    ply = []

    for i in range(0,m-2*p):
        print 'The ', i, 'th segment'
        # draw the curve using matplotlib.pyplot
        u = float(i+p)
        # draw the segment points
        uv = np.matrix(getTimeVector(u,p))
        xu = 0.0
        yu = 0.0
        for j in range(p+1):
            xu += pts[j+i][0] *uv * np.transpose(np.matrix(coe[i][j]))
            yu += pts[j+i][1] *uv * np.transpose(np.matrix(coe[i][j]))
        sx.append(float(xu))
        sy.append(float(yu))
        print float(xu), float(yu)

        # draw the curve itself
        while u <= i+1+p:
            uv = np.matrix(getTimeVector(u,p))
            xu = 0.0
            yu = 0.0
            for j in range(p+1):
                xu += pts[j+i][0] *uv * np.transpose(np.matrix(coe[i][j]))
                yu += pts[j+i][1] *uv * np.transpose(np.matrix(coe[i][j]))
            x.append(float(xu))
            y.append(float(yu))
            u+=0.1
            print u, float(xu), float(yu)
        
        print '---------------------------'

    # draw the control point
    for i in range(n+1):
        cx.append(pts[i][0])
        cy.append(pts[i][1])
    print cx
    print cy

    
    
    # print x, y
    plt.figure()
    plt.axis([0,10,0,10])
    plt.plot(x,y)
    plt.plot(sx,sy,'ro')
    plt.plot(cx,cy,'go-')
    plt.show()


        





def main():
    # test()
    # getTimeVector(0.2,4)
    draw()

if __name__ == '__main__':
    main()